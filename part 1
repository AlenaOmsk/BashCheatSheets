Bash - Bourne-Again Shell (производная от оболочки Bourne Shell).
Оболочка операционной системы (shell «оболочка») — программа, предоставляющая интерфейс для взаимодействия пользователя с функциями системы.

Bash предоставляет след. функциональные возможности:
1)переадресация ввода-вывода
В стандартный поток ввода поступают данные, которые вводятся с клавиатуры. Стандартным потоком вывода служит монитор. Т.е. В командную строку Bash'а поступают данные, которые вводятся с клавиатуры, если вводимые данные предполагает текстовый вывод, Bash выводит данные на экран. Однако такое поведение по умолчанию можно изменить: данные могут поступать из файла, а не из клавиатуры, аналогично они могут выводится в файл, а не на экран. (https://younglinux.info/bash/input)
2)применение метасимволов подстановки для сокращения имен файлов.
3)переменные и параметры для специальной настройки рабочей среды
4)встроенный набор команд для написания программ оболочки
5)функции и оболочки для модульной организации задач, выполняемой в программах оболочки
6)управление заданиями 
7)редактирование с использование синтаксиса команд редактора vi или Emacs, иммитирующее режим командной строки 
редактор vi (https://docs.altlinux.org/ru-RU/archive/2.3/html-single/junior/alt-docs-extras-linuxnovice/ch02s10.html)
редактор Emacs (https://docs.altlinux.org/ru-RU/archive/2.3/html-single/junior/alt-docs-extras-linuxnovice/ch02s11.html)
8) доступ к предыдущим командам (из предыстории их выполнения) и возможность редактировать эти команды
9)целочисленные арифметические операции
10)применение псевдонимов для сокращения имен команд 
11) прямая совместимость со стандартами POSIX
стандарты POSIX - это набор стандартов, описывающих интерфейсы между операционной системой и прикладной программой. (https://ru.bmstu.wiki/POSIX_(Portable_Operating_System_Interface_for_Unix) 
12) средства интренационализации 
средства интренационализации - это технологические приемы разработки, упрощающие адаптацию продукта к языковым и культурным особенностям региона, отличного от того, в котором разработывался продукт.
13) цикл for для повторного выполнения арифметических операций.

Интерпретатор команд обочки Bash (bash) можно вызвать след. образом:

bash [параметры] [аргументы]

Команды оболочки Bash можнов выполнять с терминала, из файла (когда в качестве первого аргумента указан сценарий) или из стандартного ввода (если аргументы отсутсвуют или указан параметр -s).Оболочка автоматически выводит приглашение на ввод команд, если стандартный ввод проиводится с терминала или командной строке указан параметр -i.
Во многих системах пусть к оболочке Bash осуществляется по ссылке /bin/sh. Если же оболочка Bash вызывается как sh, она действует в большей степени как традиционная оболочка Bourne shell. В частности исходные оболочки читают содержимое файлов /etc/profile и ~/.profile, а обычные оболочки - содержимое перемненной окружения $ENV, если она установлена.
окружение ENV - Unix-утилита, исполняющая команду с изменением окружения.

Во строенной команде set могут быть указаны однобуквенные параметры командной строки:
1) -с (строка) читать команды из указанной строки 
2) -D -dump -string. Вывести из программы все символьные строки, представленные в форме $ "...".
3) -i  создать интерактивную оболочку (с приглашением на ввод команд. Этот параметр может и не применятсья в команде set.
4) -l --login Обозначает такой же режим, как и для исходной оболочки.
5) -о параметр. Активизирует заданный параметр команды shopt. Для установки заданного парамаетра в исходное состоятние служит параметр +о
6) -р Начать работу в качестве привилегированного пользователя. Не читать содержиое переменной окружения $ENV или $BASH_ENV; не пытаться импортировать функции из рабочей среды, а также игнорировать значения переменных BASHOPTS, CDPATH, GLOBIGNORE и SHELLOPTS. В этом случае читается сожержимое обычных файлов запуска (например, ~/.bash_profile)
7) -r --restricred Создать ограниченную оболочку 
8) -s Читать команды из стандартного ввода. Результаты, выводимые из встроенных команд, направляются в файл с дескриптором 1, а все остальные результаты, выводимые из оболочки, - в файл с дескриптором 2.
Файловый дескриптор - это неотрицательное число, которое является идентификатором потока ввода-вывода. Дескриптор может быть связан с файлом, каталогом, сокетом.
Файл дескриптор 0 называется STDIN и ассоциируется с вводом данных у приложения
Файл дескриптор 1 называется STDOUT и используется приложениями для вывода данных, например командами print
Файл дескриптор 2 называется STDERR и используется приложениями для вывода данных, сообщающих об ошибке (https://timeweb.com/ru/community/articles/chto-takoe-faylovyy-deskriptor-prostymi-slovami) (https://habr.com/ru/post/471038/)
9)-v --verbose Выводить строки по мере их чтения оболочкой
10) --debugger Если при запуске доступен отладочный профиль, прочитать его и активизировать параметр extdebug команды shopt. Служит для прменения в отладчике оболочки Bash.
11) --dump-po-strings. To же, что и параметр -D, но на этот  раз строки выводятся в формате gettext по общей лицензии GNU.
12)-- help. Вывести соообщение об использовании команды и успешно завершить.
13)--init-file файл, --rcfile файл. Использовать указанный файл вместо файла ~/.bashrc для запуска интерактивных оболочек.
14) --noediting. Не пользоваться библиотекой GNU Readline для ввода, даже в интерактивной оболочке
Интерактивная оболочка - это любой процесс оболочки, который вы используете для ввода команд и полулчения результатов этих команда, т.е оболочка, с которой взаимодейтсвует пользователь.
15)--noprofile. не читать файл /etc/profile или любые другие личные данные запуска 
16)--norc. не читать файл ~/.bashrc. Активизируется автоматически, когда оболочка вызывается как sh.
.bashrc Файл представляет собой скрипт, который выполняется всякий раз, когда новый терминал сеанс запускается в интерактивном режиме. Это то, что происходит, когда вы открываете новое окно терминала, нажимая Ctrl+ Alt+ T, или просто открываете новую вкладку терминала.
В отличие от терминальной сессии в режиме входа в систему вам будет предложено ввести имя пользователя и пароль и выполнить ~/.bash_profile сценарий. Это то, что происходит, например, когда вы входите в удаленную систему через SSH.
17)--posix. Активизировать режим работы по стандарту POSIX.
18)--version. Вывести сообщение об используемой версии оболочки и успешно завершить её.
19) -, --. Завершить обработку параметров.


Аргументы присваиваются позиционным параметрам $1, $2 и т.д. Если в качестве первого аргумента указывается сценарий, из него читаются команды, а остальные аргументы присваиваются позиционным параметрам $1, $2 и т.д. Имя сценария доступно в качестве позиционного параметра $0. Файл самого сценария не обязательно должен быть исполняемым, но должен быть доступным для чтения.
Позиционные параметры - это аргументы командной строки (или функции в скрипте), доступ к которым осуществляется по номеру.

По завершении любой команды предоставляется числовой код её завершения или возвращается значение. Внешние команды вроде ls предоставляют такое значение операционной системе. А внутренние команды вроде cd предоставляют его непосредственно оболочке. Оболочка автоматически извлекает возвращаемое значение по завершении команды. По общепринятому соглашению нулевой код заавершения означает истинный или удачный исход выполнения команды, а любой другой код завершения - ложный или неудачный исход её выполнения. Именно таким образом в оболочке организируется управление потоком коман в таких операторах как if, while и until.
Кроме того, оболочка делает значение, возвращаемое последней выполняющейся командой, доступным для своего сценария в переменно $?.
Значения кодов завершения могут находится в переделах от 0 до 255. Для обозначения отдельных условий завершения команд в оболочке применяются конкретные значения:
0 - обозначает удачный исход выполнения команды
2 - возвращается встроенными командами для указания на ошибки в их использовании
126 - команда была обнаружена, но неиспользована.
127 - команда не была обнаружена.
128+N - обозначает, что выполенние команды было прервано, поскольку был получен сигнал N.

Оболочка читает содержимое одного или нескольких файлов запуска. Содержимое некоторых этих файлов читается только в случае, если оболочка является исходной, т.е. служит для входа в систему. Оболочка Bash чиатет содержимеое этих файлов в следю порядке:
1) файл /etc/profile. Выполняется автоматически при входе в систему.
2) первый файл, обнаруживаемый в след. списке:  ~/.bash_profile,  ~/.bash_login или  ~/.profile. Выполняется автоматически при входе в систему.
3) файл  ~/.bashrc. Читается всякой неисходной оболочки. Но если оболочка  Bash вызывается как sh или с параметром --posix, то она читает содержимое окружения $ENV ради обеспечения совместимости со стандартом POSIX.

Функции getpwnam() и getpwuid() из библиотеки С служат для выдачи информации о начальных каталогах по сокращениям ~имя. Когда происходит выход из интерактивной исходной оболочки или же в неинтерактивной исходной оболочке выполняет встроенная команда exit, оболочка Bash чиатет и выполняет содержимое файла ~/.bash_logout, при условии, что этот файл существует. (Исходной является та оболочка, где установлен парамерт -l)

Метасимволы подстановки имен файлов
* - совпадение с любой строкой, содержащей от нуля и больше символов
? - совпадение с любым символом
[abc...] - совпадение с любым символомв квадратных скобках, где дефис может обозначать заданный диапазон символов (a-z, A-Z, 0-9)
[!abc...] - совпадение с любым сиволом, кроме тех, которые указаны в скобках
~ - начальный каталог текущего пользователя
~ имя - начальный каталог пользователя, имеющего указанное имя
~+ текущий рабочий каталог (содержимое переменной $PWD)
~- - предыдущий рабочий каталог

Если установлен параметр extglob, то для для подстановки имен файлов применяются след. метасимволы
?(шаблон) - совпадение с нулевым или единичным количеством экземпляров заданного шаблона 
*(шаблон) - совпадение с нулевым или большим количеством экземпляров заданного шаблона
+(шаблон) - совпадение с единичным или большим количеством экземпляром заданного шаблона 
@(шаблон) - точное совпадение с одним экземпляром заданного шаблона
!(шаблон) - совпадение с любым символьными строками, не совпадающими с заданным шаблоном 

В качестве заданного шаблона может служить последовательность шаблонов, разделяемая знаком | , который обозначает, что совпадение может произойти с любым из перечисленных шаблонов.
В оболочке Bash поддерживается  обозначение [[=с=]], принятое в стандарте POSIX для указания на совпадение с символами, которые имеют одинаковый вес, а также обозначение [[.c.]] для последовательной сортировки. Кроме того, форма [[:класс:]] пощволяет обозначить совпадение с перечисленными ниже классами символов

alnum - буквенно-цифровые
alpha - буквенные 
ascii - символы в коде ASCII (не по стандарту POSIX)
blank - пробелы и знаки табуляции
cntrl - управляющие
digit - десятичные цифры
graph - непробельные
lower - строчные буквы
print - печатаемые
punct - знаки препи
space - пробельные
upper- прописные буквы
word - [[:word:]] означает то же самое, что и [[:alum:]] (не по стандарту POSIX)
xdigit - шестнадцатеричные цифры

Сценарии читаются в оболочке Bash построчно. Каждая прочитанная строка полностью подвергается синтаксическому анализу, прежде чем начатьвыполнение любой из комнд в этой строчке. Такой подход чреват след. последствиями
1) Нельзя определить псевдоним и воспользоваться им в той же самой строке
2)Команды, оказывающие непосредственное влияние на синтаксический анализ сценария, должны быть указаны в отдельных строках прежде тех частей сценария, на анализ которых они могут оказывать влияние.
То же самое касается функций. Они подвергаются синтаксическому анализу все сразу, и поэтому параметр extglob нельзя активизировать в теле функции, ожидая, что это повлияет на саму функцию. Следовательно, чтобы воспользоваться расширенными возможностями сопоставления с шаблонам, следует ввести команду с этим параметром в отдельной строке, расположив её в самом начале сценария. 
